{"ast":null,"code":"var _jsxFileName = \"D:\\\\dougnut-chart-library\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport chart from \"chart.js/dist/chart\";\nimport React, { useRef } from \"react\";\nimport { Doughnut, Pie } from \"react-chartjs-2\";\nimport \"./App.css\";\nimport data from \"./data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getOrCreateLegendList = (chart, id) => {\n  const legendContainer = document.getElementById(id);\n  let listContainer = legendContainer.querySelector(\"ul\");\n\n  if (!listContainer) {\n    listContainer = document.createElement(\"ul\");\n    listContainer.style.display = \"flex\";\n    listContainer.style.flexDirection = \"column\";\n    listContainer.style.margin = 0;\n    listContainer.style.padding = 0;\n    legendContainer.appendChild(listContainer);\n  }\n\n  return listContainer;\n};\n\nconst htmlLegendPlugin = {\n  id: \"htmlLegend\",\n\n  afterUpdate(chart, args, options) {\n    const ul = getOrCreateLegendList(chart, options.containerID); // Remove old legend items\n\n    while (ul.firstChild) {\n      ul.firstChild.remove();\n    } // Reuse the built-in legendItems generator\n\n\n    const items = chart.options.plugins.legend.labels.generateLabels(chart);\n    items.forEach(item => {\n      const li = document.createElement(\"li\");\n      li.style.alignItems = \"center\";\n      li.style.cursor = \"pointer\";\n      li.style.display = \"flex\";\n      li.style.flexDirection = \"row\";\n      li.style.marginLeft = \"10px\";\n      li.style.marginBottom = \"5px\";\n      let legendItems = chart.legend.legendItems;\n      let count = 0;\n      let iValue = -1;\n\n      for (let i = 0; i < legendItems.length; i++) {\n        // legendItems.\n        if (!legendItems[i].hidden) {\n          count = count + 1;\n          iValue = i;\n        }\n      }\n\n      let firstTime = count === legendItems.length ? true : false;\n\n      li.onclick = (p, p2, p3) => {\n        const {\n          type\n        } = chart.config;\n\n        if (type === \"pie\" || type === \"doughnut\") {\n          for (let i = 0; i < legendItems.length; i++) {\n            if (firstTime) {\n              if (i !== item.index) {\n                chart.toggleDataVisibility(i);\n              }\n            }\n          }\n\n          if (!firstTime) {\n            chart.toggleDataVisibility(item.index);\n          }\n\n          if (count === 1 && iValue === item.index) {\n            for (let i = 0; i < legendItems.length; i++) {\n              chart.toggleDataVisibility(i);\n            }\n          }\n        }\n\n        chart.update();\n      }; // Color box\n\n\n      const boxSpan = document.createElement(\"span\");\n      boxSpan.style.background = item.fillStyle;\n      boxSpan.style.borderColor = item.strokeStyle;\n      boxSpan.style.borderWidth = item.lineWidth + \"px\";\n      boxSpan.style.display = \"inline-block\";\n      boxSpan.style.height = \"20px\";\n      boxSpan.style.marginRight = \"10px\";\n      boxSpan.style.width = \"20px\"; // Text\n\n      const textContainer = document.createElement(\"p\");\n      textContainer.style.color = item.fontColor;\n      textContainer.style.margin = 0;\n      textContainer.style.padding = 0;\n      textContainer.style.textDecoration = firstTime ? item.hidden ? \"line-through\" : \"\" : item.hidden ? \"\" : \"line-through\";\n      const text = document.createTextNode(item.text);\n      textContainer.appendChild(text);\n      li.appendChild(boxSpan);\n      li.appendChild(textContainer);\n      ul.appendChild(li);\n    });\n  }\n\n};\n\nconst dynamicColors = function () {\n  const r = Math.floor(Math.random() * 255);\n  const g = Math.floor(Math.random() * 255);\n  const b = Math.floor(Math.random() * 255);\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n};\n\ndata.labels.forEach(() => data.datasets[0].backgroundColor.push(dynamicColors()));\nconst total = calculateTotal();\n\nfunction App() {\n  _s();\n\n  const myChart = useRef();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Pie Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"300px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Doughnut, {\n          ref: myChart,\n          data: data,\n          plugins: [htmlLegendPlugin],\n          options: {\n            plugins: {\n              htmlLegend: {\n                // ID of the container to put the legend in\n                containerID: \"js-legend\"\n              },\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    let legends = myChart.current.legend.legendItems;\n                    let chartData = myChart.current._metasets[0]._parsed;\n                    let count = 0;\n\n                    for (let i = 0; i < legends.length; i++) {\n                      if (!legends[i].hidden) {\n                        count += chartData[i];\n                      }\n                    }\n\n                    let label = context.label || \"\";\n                    let percentage = count === 0 ? (100 * (context.parsed || 0) / total).toFixed(2) : (100 * (context.parsed || 0) / count).toFixed(2);\n                    label += \": \" + percentage + \"%\";\n                    return label;\n                  }\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"js-legend\",\n        className: \"chart-legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"O6bqJz7q1nOW9WIMVeWSOTL647Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/dougnut-chart-library/src/App.js"],"names":["chart","React","useRef","Doughnut","Pie","data","getOrCreateLegendList","id","legendContainer","document","getElementById","listContainer","querySelector","createElement","style","display","flexDirection","margin","padding","appendChild","htmlLegendPlugin","afterUpdate","args","options","ul","containerID","firstChild","remove","items","plugins","legend","labels","generateLabels","forEach","item","li","alignItems","cursor","marginLeft","marginBottom","legendItems","count","iValue","i","length","hidden","firstTime","onclick","p","p2","p3","type","config","index","toggleDataVisibility","update","boxSpan","background","fillStyle","borderColor","strokeStyle","borderWidth","lineWidth","height","marginRight","width","textContainer","color","fontColor","textDecoration","text","createTextNode","dynamicColors","r","Math","floor","random","g","b","datasets","backgroundColor","push","total","calculateTotal","App","myChart","htmlLegend","tooltip","callbacks","label","context","legends","current","chartData","_metasets","_parsed","percentage","parsed","toFixed"],"mappings":"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","sourcesContent":["import chart from \"chart.js/dist/chart\";\nimport React, { useRef } from \"react\";\nimport { Doughnut, Pie } from \"react-chartjs-2\";\nimport \"./App.css\";\nimport data from \"./data.json\"\nconst getOrCreateLegendList = (chart, id) => {\n  const legendContainer = document.getElementById(id);\n  let listContainer = legendContainer.querySelector(\"ul\");\n\n  if (!listContainer) {\n    listContainer = document.createElement(\"ul\");\n    listContainer.style.display = \"flex\";\n    listContainer.style.flexDirection = \"column\";\n    listContainer.style.margin = 0;\n    listContainer.style.padding = 0;\n\n    legendContainer.appendChild(listContainer);\n  }\n\n  return listContainer;\n};\nconst htmlLegendPlugin = {\n  id: \"htmlLegend\",\n  afterUpdate(chart, args, options) {\n    const ul = getOrCreateLegendList(chart, options.containerID);\n\n    // Remove old legend items\n    while (ul.firstChild) {\n      ul.firstChild.remove();\n    }\n\n    // Reuse the built-in legendItems generator\n    const items = chart.options.plugins.legend.labels.generateLabels(chart);\n\n    items.forEach((item) => {\n      const li = document.createElement(\"li\");\n      li.style.alignItems = \"center\";\n      li.style.cursor = \"pointer\";\n      li.style.display = \"flex\";\n      li.style.flexDirection = \"row\";\n      li.style.marginLeft = \"10px\";\n      li.style.marginBottom = \"5px\";\n      let legendItems = chart.legend.legendItems;\n      let count = 0;\n      let iValue = -1;\n      for (let i = 0; i < legendItems.length; i++) {\n        // legendItems.\n        if (!legendItems[i].hidden) {\n          count = count + 1;\n          iValue = i;\n        }\n      }\n      let firstTime = count === legendItems.length ? true : false;\n      li.onclick = (p, p2, p3) => {\n\n        const { type } = chart.config;\n        if (type === \"pie\" || type === \"doughnut\") {\n\n          for (let i = 0; i < legendItems.length; i++) {\n            if (firstTime) {\n              if (i !== item.index) {\n                chart.toggleDataVisibility(i);\n              }\n            }\n          }\n          if (!firstTime) {\n            chart.toggleDataVisibility(item.index);\n          }\n          if (count === 1 && iValue === item.index) {\n            for (let i = 0; i < legendItems.length; i++) {\n              chart.toggleDataVisibility(i);\n            }\n          }\n\n        }\n        chart.update();\n      };\n\n      // Color box\n      const boxSpan = document.createElement(\"span\");\n      boxSpan.style.background = item.fillStyle;\n      boxSpan.style.borderColor = item.strokeStyle;\n      boxSpan.style.borderWidth = item.lineWidth + \"px\";\n      boxSpan.style.display = \"inline-block\";\n      boxSpan.style.height = \"20px\";\n      boxSpan.style.marginRight = \"10px\";\n      boxSpan.style.width = \"20px\";\n\n      // Text\n      const textContainer = document.createElement(\"p\");\n      textContainer.style.color = item.fontColor;\n      textContainer.style.margin = 0;\n      textContainer.style.padding = 0;\n      textContainer.style.textDecoration = firstTime ? item.hidden ? \"line-through\" : \"\" : item.hidden ? \"\" : \"line-through\";\n\n      const text = document.createTextNode(item.text);\n      textContainer.appendChild(text);\n\n      li.appendChild(boxSpan);\n      li.appendChild(textContainer);\n      ul.appendChild(li);\n    });\n  },\n};\nconst dynamicColors = function () {\n  const r = Math.floor(Math.random() * 255);\n  const g = Math.floor(Math.random() * 255);\n  const b = Math.floor(Math.random() * 255);\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n};\n\ndata.labels.forEach(() =>\n  data.datasets[0].backgroundColor.push(dynamicColors())\n);\n\nconst total = calculateTotal()\n\nfunction App() {\n  const myChart = useRef();\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"title\">Pie Chart</h1>\n      </div>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ width: \"300px\" }}>\n          <Doughnut\n            ref={myChart}\n            data={data}\n            plugins={[htmlLegendPlugin]}\n            options={{\n              plugins: {\n                htmlLegend: {\n                  // ID of the container to put the legend in\n                  containerID: \"js-legend\",\n                },\n\n                legend: {\n                  display: false,\n                },\n                tooltip: {\n                  callbacks: {\n                    label: function (context) {\n                      let legends = myChart.current.legend.legendItems;\n                      let chartData = myChart.current._metasets[0]._parsed;\n                      let count = 0;\n                      for (let i = 0; i < legends.length; i++) {\n                        if (!legends[i].hidden) {\n                          count += chartData[i];\n                        }\n                      }\n                      let label = context.label || \"\";\n                      let percentage = count === 0 ?\n                        ((100 * (context.parsed || 0)) / total).toFixed(2) :\n                        ((100 * (context.parsed || 0)) / count).toFixed(2)\n\n                      label += \": \" + percentage + \"%\";\n                      return label;\n                    },\n                  },\n                },\n              },\n            }}\n          />\n        </div>\n        <div id=\"js-legend\" className=\"chart-legend\"></div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}