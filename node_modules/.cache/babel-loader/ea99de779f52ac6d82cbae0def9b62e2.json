{"ast":null,"code":"export const htmlLegendPlugin = {\n  id: \"htmlLegend\",\n\n  afterUpdate(chart, args, options) {\n    const ul = getOrCreateLegendList(chart, options.containerID); // Remove old legend items\n\n    while (ul.firstChild) {\n      ul.firstChild.remove();\n    } // Reuse the built-in legendItems generator\n\n\n    const items = chart.options.plugins.legend.labels.generateLabels(chart);\n    items.forEach(item => {\n      const li = document.createElement(\"li\");\n      li.style.alignItems = \"center\";\n      li.style.cursor = \"pointer\";\n      li.style.display = \"flex\";\n      li.style.flexDirection = \"row\";\n      li.style.marginLeft = \"10px\";\n      li.style.marginBottom = \"5px\";\n      let legendItems = chart.legend.legendItems;\n      let count = 0;\n      let iValue = -1;\n\n      for (let i = 0; i < legendItems.length; i++) {\n        if (!legendItems[i].hidden) {\n          count = count + 1;\n          iValue = i;\n        }\n      }\n\n      let firstTime = count === legendItems.length ? true : false;\n\n      li.onclick = (p, p2, p3) => {\n        const {\n          type\n        } = chart.config;\n\n        if (type === \"pie\" || type === \"doughnut\") {\n          for (let i = 0; i < legendItems.length; i++) {\n            if (firstTime) {\n              if (i !== item.index) {\n                chart.toggleDataVisibility(i);\n              }\n            }\n          }\n\n          if (!firstTime) {\n            chart.toggleDataVisibility(item.index);\n          }\n\n          if (count === 1 && iValue === item.index) {\n            for (let i = 0; i < legendItems.length; i++) {\n              chart.toggleDataVisibility(i);\n            }\n          }\n        }\n\n        chart.update();\n      }; // Color box\n\n\n      const boxSpan = document.createElement(\"span\");\n      boxSpan.style.background = item.fillStyle;\n      boxSpan.style.borderColor = item.strokeStyle;\n      boxSpan.style.borderWidth = item.lineWidth + \"px\";\n      boxSpan.style.display = \"inline-block\";\n      boxSpan.style.height = \"20px\";\n      boxSpan.style.marginRight = \"10px\";\n      boxSpan.style.width = \"20px\"; // Text\n\n      const textContainer = document.createElement(\"p\");\n      textContainer.style.color = item.fontColor;\n      textContainer.style.margin = 0;\n      textContainer.style.padding = 0;\n      textContainer.style.textDecoration = firstTime ? item.hidden ? \"line-through\" : \"\" : item.hidden ? \"\" : \"line-through\";\n      const text = document.createTextNode(item.text);\n      textContainer.appendChild(text);\n      li.appendChild(boxSpan);\n      li.appendChild(textContainer);\n      ul.appendChild(li);\n    });\n  }\n\n};\nexport const calculateTotal = data => {\n  return data.datasets[0].data.reduce((a, b) => a + b, 0);\n};\n\nconst dynamicColors = function () {\n  const r = Math.floor(Math.random() * 255);\n  const g = Math.floor(Math.random() * 255);\n  const b = Math.floor(Math.random() * 255);\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n};\n\nexport const addDynamicColor = data => {\n  data.labels.forEach(() => data.datasets[0].backgroundColor.push(dynamicColors()));\n};","map":{"version":3,"sources":["D:/dougnut-chart-library/src/helper.js"],"names":["htmlLegendPlugin","id","afterUpdate","chart","args","options","ul","getOrCreateLegendList","containerID","firstChild","remove","items","plugins","legend","labels","generateLabels","forEach","item","li","document","createElement","style","alignItems","cursor","display","flexDirection","marginLeft","marginBottom","legendItems","count","iValue","i","length","hidden","firstTime","onclick","p","p2","p3","type","config","index","toggleDataVisibility","update","boxSpan","background","fillStyle","borderColor","strokeStyle","borderWidth","lineWidth","height","marginRight","width","textContainer","color","fontColor","margin","padding","textDecoration","text","createTextNode","appendChild","calculateTotal","data","datasets","reduce","a","b","dynamicColors","r","Math","floor","random","g","addDynamicColor","backgroundColor","push"],"mappings":"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","sourcesContent":["export const htmlLegendPlugin = {\r\n    id: \"htmlLegend\",\r\n    afterUpdate(chart, args, options) {\r\n      const ul = getOrCreateLegendList(chart, options.containerID);\r\n      // Remove old legend items\r\n      while (ul.firstChild) {\r\n        ul.firstChild.remove();\r\n      }\r\n      // Reuse the built-in legendItems generator\r\n      const items = chart.options.plugins.legend.labels.generateLabels(chart);\r\n      items.forEach((item) => {\r\n        const li = document.createElement(\"li\");\r\n        li.style.alignItems = \"center\";\r\n        li.style.cursor = \"pointer\";\r\n        li.style.display = \"flex\";\r\n        li.style.flexDirection = \"row\";\r\n        li.style.marginLeft = \"10px\";\r\n        li.style.marginBottom = \"5px\";\r\n        let legendItems = chart.legend.legendItems;\r\n        let count = 0;\r\n        let iValue = -1;\r\n        for (let i = 0; i < legendItems.length; i++) {\r\n          if (!legendItems[i].hidden) {\r\n            count = count + 1;\r\n            iValue = i;\r\n          }\r\n        }\r\n        let firstTime = count === legendItems.length ? true : false;\r\n        li.onclick = (p, p2, p3) => {\r\n  \r\n          const { type } = chart.config;\r\n          if (type === \"pie\" || type === \"doughnut\") {\r\n  \r\n            for (let i = 0; i < legendItems.length; i++) {\r\n              if (firstTime) {\r\n                if (i !== item.index) {\r\n                  chart.toggleDataVisibility(i);\r\n                }\r\n              }\r\n            }\r\n            if (!firstTime) {\r\n              chart.toggleDataVisibility(item.index);\r\n            }\r\n            if (count === 1 && iValue === item.index) {\r\n              for (let i = 0; i < legendItems.length; i++) {\r\n                chart.toggleDataVisibility(i);\r\n              }\r\n            }\r\n  \r\n          }\r\n          chart.update();\r\n        };\r\n        // Color box\r\n        const boxSpan = document.createElement(\"span\");\r\n        boxSpan.style.background = item.fillStyle;\r\n        boxSpan.style.borderColor = item.strokeStyle;\r\n        boxSpan.style.borderWidth = item.lineWidth + \"px\";\r\n        boxSpan.style.display = \"inline-block\";\r\n        boxSpan.style.height = \"20px\";\r\n        boxSpan.style.marginRight = \"10px\";\r\n        boxSpan.style.width = \"20px\";\r\n        // Text\r\n        const textContainer = document.createElement(\"p\");\r\n        textContainer.style.color = item.fontColor;\r\n        textContainer.style.margin = 0;\r\n        textContainer.style.padding = 0;\r\n        textContainer.style.textDecoration = firstTime ? item.hidden ? \"line-through\" : \"\" : item.hidden ? \"\" : \"line-through\";\r\n        const text = document.createTextNode(item.text);\r\n        textContainer.appendChild(text);\r\n        li.appendChild(boxSpan);\r\n        li.appendChild(textContainer);\r\n        ul.appendChild(li);\r\n      });\r\n    },\r\n  };\r\n  \r\nexport const calculateTotal = (data) => {\r\n    return data.datasets[0].data.reduce((a, b) => a + b, 0);\r\n}\r\nconst dynamicColors = function () {\r\n    const r = Math.floor(Math.random() * 255);\r\n    const g = Math.floor(Math.random() * 255);\r\n    const b = Math.floor(Math.random() * 255);\r\n    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n  };\r\n  \r\nexport const addDynamicColor = (data) => {\r\n    data.labels.forEach(() =>\r\n    data.datasets[0].backgroundColor.push(dynamicColors())\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}