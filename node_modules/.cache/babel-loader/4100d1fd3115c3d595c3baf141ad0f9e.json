{"ast":null,"code":"var _jsxFileName = \"D:\\\\dougnut-chart-library\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport chart from \"chart.js/dist/chart\";\nimport React, { useRef } from \"react\";\nimport { Doughnut, Pie } from \"react-chartjs-2\";\nimport \"./App.css\";\nimport data from \"./data.json\";\nimport { addDynamicColor, calculateTotal, htmlLegendPlugin } from \"./helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getOrCreateLegendList = (chart, id) => {\n  const legendContainer = document.getElementById(id);\n  let listContainer = legendContainer.querySelector(\"ul\");\n\n  if (!listContainer) {\n    listContainer = document.createElement(\"ul\");\n    listContainer.style.display = \"flex\";\n    listContainer.style.flexDirection = \"column\";\n    listContainer.style.margin = 0;\n    listContainer.style.padding = 0;\n    legendContainer.appendChild(listContainer);\n  }\n\n  return listContainer;\n};\n\naddDynamicColor(data);\nconst total = calculateTotal(data);\n\nfunction App() {\n  _s();\n\n  const myChart = useRef();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Pie Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"300px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Doughnut, {\n          ref: myChart,\n          data: data,\n          plugins: [htmlLegendPlugin],\n          options: {\n            plugins: {\n              htmlLegend: {\n                // ID of the container to put the legend in\n                containerID: \"js-legend\"\n              },\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    let legends = myChart.current.legend.legendItems;\n                    let chartData = myChart.current._metasets[0]._parsed;\n                    let count = 0;\n\n                    for (let i = 0; i < legends.length; i++) {\n                      if (!legends[i].hidden) {\n                        count += chartData[i];\n                      }\n                    }\n\n                    let label = context.label || \"\";\n                    let percentage = count === 0 ? (100 * (context.parsed || 0) / total).toFixed(2) : (100 * (context.parsed || 0) / count).toFixed(2);\n                    label += \": \" + percentage + \"%\";\n                    return label;\n                  }\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"js-legend\",\n        className: \"chart-legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"O6bqJz7q1nOW9WIMVeWSOTL647Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/dougnut-chart-library/src/App.js"],"names":["chart","React","useRef","Doughnut","Pie","data","addDynamicColor","calculateTotal","htmlLegendPlugin","getOrCreateLegendList","id","legendContainer","document","getElementById","listContainer","querySelector","createElement","style","display","flexDirection","margin","padding","appendChild","total","App","myChart","width","plugins","htmlLegend","containerID","legend","tooltip","callbacks","label","context","legends","current","legendItems","chartData","_metasets","_parsed","count","i","length","hidden","percentage","parsed","toFixed"],"mappings":"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","sourcesContent":["import chart from \"chart.js/dist/chart\";\nimport React, { useRef } from \"react\";\nimport { Doughnut, Pie } from \"react-chartjs-2\";\nimport \"./App.css\";\nimport data from \"./data.json\"\nimport { addDynamicColor, calculateTotal, htmlLegendPlugin } from \"./helper\";\nconst getOrCreateLegendList = (chart, id) => {\n  const legendContainer = document.getElementById(id);\n  let listContainer = legendContainer.querySelector(\"ul\");\n\n  if (!listContainer) {\n    listContainer = document.createElement(\"ul\");\n    listContainer.style.display = \"flex\";\n    listContainer.style.flexDirection = \"column\";\n    listContainer.style.margin = 0;\n    listContainer.style.padding = 0;\n\n    legendContainer.appendChild(listContainer);\n  }\n\n  return listContainer;\n};\n\naddDynamicColor(data);\nconst total = calculateTotal(data)\n\nfunction App() {\n  const myChart = useRef();\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"title\">Pie Chart</h1>\n      </div>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ width: \"300px\" }}>\n          <Doughnut\n            ref={myChart}\n            data={data}\n            plugins={[htmlLegendPlugin]}\n            options={{\n              plugins: {\n                htmlLegend: {\n                  // ID of the container to put the legend in\n                  containerID: \"js-legend\",\n                },\n\n                legend: {\n                  display: false,\n                },\n                tooltip: {\n                  callbacks: {\n                    label: function (context) {\n                      let legends = myChart.current.legend.legendItems;\n                      let chartData = myChart.current._metasets[0]._parsed;\n                      let count = 0;\n                      for (let i = 0; i < legends.length; i++) {\n                        if (!legends[i].hidden) {\n                          count += chartData[i];\n                        }\n                      }\n                      let label = context.label || \"\";\n                      let percentage = count === 0 ?\n                        ((100 * (context.parsed || 0)) / total).toFixed(2) :\n                        ((100 * (context.parsed || 0)) / count).toFixed(2)\n\n                      label += \": \" + percentage + \"%\";\n                      return label;\n                    },\n                  },\n                },\n              },\n            }}\n          />\n        </div>\n        <div id=\"js-legend\" className=\"chart-legend\"></div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}